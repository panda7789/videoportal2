diff --git a/lib/index.d.ts b/lib/index.d.ts
index 934fd40d9b59db0b34d20d2debcbe4273e30b5a8..c914fd6f24e38cbd3286eb346a0050435c386fce 100644
--- a/lib/index.d.ts
+++ b/lib/index.d.ts
@@ -3,3 +3,4 @@ export declare const generateVideoThumbnails: (videoFile: File, numberOfThumbnai
 export declare const getVideoCover: (urlOfFIle: string, seekTo?: number) => Promise<string>;
 export declare const generateVideoThumbnailViaUrl: (urlOfFIle: string, videoTimeInSeconds: number) => Promise<string>;
 export declare const getVideoDurationFromVideoFile: (videoFile: File | string) => Promise<number>;
+export declare const getVideoThumbnail: (videoFile: File | string, videoTimeInSeconds: number) => Promise<string>;
diff --git a/lib/index.js b/lib/index.js
index b637eabcda2cad10e56edfeb64fca512c96df242..03f7575f2ffe12fa8717f72253711c75541f617e 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -1 +1 @@
-"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.getVideoDurationFromVideoFile=exports.generateVideoThumbnailViaUrl=exports.getVideoCover=exports.generateVideoThumbnails=exports.importFileandPreview=void 0;const importFileandPreview=(file,revoke)=>{return new Promise((resolve,reject)=>{window.URL=window.URL||window.webkitURL;let preview=window.URL.createObjectURL(file);if(revoke){window.URL.revokeObjectURL(preview)}setTimeout(()=>{resolve(preview)},100)})};exports.importFileandPreview=importFileandPreview;const generateVideoThumbnails=async(videoFile,numberOfThumbnails,type)=>{let thumbnail=[];let fractions=[];return type!=="url"?new Promise(async(resolve,reject)=>{var _a;if(!((_a=videoFile.type)===null||_a===void 0?void 0:_a.includes("video")))reject("not a valid video file");await(0,exports.getVideoDurationFromVideoFile)(videoFile).then(async duration=>{for(let i=0;i<=duration;i+=duration/numberOfThumbnails){fractions.push(Math.floor(i))}let promiseArray=fractions.map((time,index)=>getVideoThumbnail(videoFile,index>=fractions.length-1?time-2:time));await Promise.all(promiseArray).then(res=>{res.forEach(res=>{thumbnail.push(res)});resolve(thumbnail)}).catch(err=>{reject(err)}).finally(()=>resolve(thumbnail))}).catch(err=>{reject(err)});reject("something went wrong")}):new Promise(async(resolve,reject)=>{await(0,exports.getVideoDurationFromVideoFile)(videoFile).then(async duration=>{console.log("duration",duration);for(let i=0;i<=duration;i+=duration/numberOfThumbnails){fractions.push(Math.floor(i))}let promiseArray=fractions.map((time,index)=>getVideoThumbnail(videoFile,index>=fractions.length-1?time-2:time));await Promise.all(promiseArray).then(res=>{res.forEach(res=>{thumbnail.push(res)});resolve(thumbnail)}).catch(err=>{reject(err)}).finally(()=>resolve(thumbnail))});reject("something went wrong")})};exports.generateVideoThumbnails=generateVideoThumbnails;const getVideoThumbnail=(file,videoTimeInSeconds)=>{return new Promise((resolve,reject)=>{var _a;if((_a=file===null||file===void 0?void 0:file.type)===null||_a===void 0?void 0:_a.match("video")){(0,exports.importFileandPreview)(file).then(urlOfFIle=>{(0,exports.getVideoCover)(urlOfFIle,videoTimeInSeconds).then(res=>{resolve(res)})})}else if(file){(0,exports.getVideoCover)(file,videoTimeInSeconds).then(res=>{resolve(res)}).catch(err=>{reject(err)})}else{reject("file not valid")}})};const getVideoCover=(urlOfFIle,seekTo=0)=>{return new Promise((resolve,reject)=>{try{const videoPlayer=document.createElement("video");videoPlayer.setAttribute("src",urlOfFIle);videoPlayer.crossOrigin="Anonymous";videoPlayer.load();videoPlayer.addEventListener("error",ex=>{reject(`error when loading video file ${ex}`)});videoPlayer.addEventListener("loadedmetadata",()=>{if(videoPlayer.duration<seekTo){reject("video is too short.");return}setTimeout(()=>{videoPlayer.currentTime=seekTo},200);videoPlayer.addEventListener("seeked",()=>{const canvas=document.createElement("canvas");canvas.width=videoPlayer.videoWidth;canvas.height=videoPlayer.videoHeight;const ctx=canvas.getContext("2d");ctx.drawImage(videoPlayer,0,0,canvas.width,canvas.height);ctx.canvas.toBlob(blob=>{var reader=new FileReader;reader.readAsDataURL(blob);reader.onloadend=function(){var base64data=reader.result;resolve(base64data)}},"image/jpeg",1)})})}catch(error){reject(error)}})};exports.getVideoCover=getVideoCover;const generateVideoThumbnailViaUrl=(urlOfFIle,videoTimeInSeconds)=>{return new Promise((resolve,reject)=>{try{var video=document.createElement("video");var timeupdate=function(){if(snapImage()){video.removeEventListener("timeupdate",timeupdate);video.pause()}};video.addEventListener("loadeddata",function(){try{if(snapImage()){video.removeEventListener("timeupdate",timeupdate)}}catch(error){reject(error)}});var snapImage=function(){var canvas=document.createElement("canvas");canvas.width=video.videoWidth;canvas.height=video.videoHeight;canvas.getContext("2d").drawImage(video,0,0,canvas.width,canvas.height);var image=canvas.toBlob(blob=>{var reader=new FileReader;reader.readAsDataURL(blob);reader.onloadend=function(){var base64data=reader.result;resolve(base64data)}},"image/jpeg",1);var success=(image===null||image===void 0?void 0:image.length)>1e5;if(success){URL.revokeObjectURL(urlOfFIle);resolve(image)}return success};video.addEventListener("timeupdate",timeupdate);video.preload="metadata";video.src=urlOfFIle;video.muted=true;video.playsInline=true;video.crossOrigin="Anonymous";video.currentTime=videoTimeInSeconds;video.play().then().catch(err=>{reject({status:500,reason:`Access to video at ${urlOfFIle} from origin ${window.location.hostname} has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.`,message:err})})}catch(error){reject(error)}})};exports.generateVideoThumbnailViaUrl=generateVideoThumbnailViaUrl;const getVideoDurationFromVideoFile=videoFile=>{return new Promise((resolve,reject)=>{var _a;try{if(videoFile){if((_a=videoFile===null||videoFile===void 0?void 0:videoFile.type)===null||_a===void 0?void 0:_a.match("video")){(0,exports.importFileandPreview)(videoFile).then(url=>{generateVideoDurationFromUrl(url).then(res=>{resolve(res)})})}else{generateVideoDurationFromUrl(videoFile).then(res=>{resolve(res)})}}else{reject("Cannot generate video duration for this video file.")}}catch(error){reject(error)}})};exports.getVideoDurationFromVideoFile=getVideoDurationFromVideoFile;const generateVideoDurationFromUrl=url=>{return new Promise((resolve,reject)=>{let video=document.createElement("video");video.addEventListener("loadeddata",function(){resolve(video.duration);window.URL.revokeObjectURL(url)});video.preload="metadata";video.src=url;video.muted=true;video.crossOrigin="Anonymous";video.playsInline=true;video.play()})};
\ No newline at end of file
+"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getVideoThumbnail=exports.getVideoDurationFromVideoFile=exports.generateVideoThumbnailViaUrl=exports.getVideoCover=exports.generateVideoThumbnails=exports.importFileandPreview=void 0;const importFileandPreview=(file,revoke)=>new Promise((resolve,reject)=>{window.URL=window.URL||window.webkitURL;let preview=window.URL.createObjectURL(file);revoke&&window.URL.revokeObjectURL(preview),setTimeout(()=>{resolve(preview)},100)});exports.importFileandPreview=importFileandPreview;const generateVideoThumbnails=async(videoFile,numberOfThumbnails,type)=>{let thumbnail=[],fractions=[];return new Promise("url"!==type?async(resolve,reject)=>{var _a;(null===(_a=videoFile.type)||void 0===_a?void 0:_a.includes("video"))||reject("not a valid video file"),await(0,exports.getVideoDurationFromVideoFile)(videoFile).then(async duration=>{for(let i=0;i<=duration;i+=duration/numberOfThumbnails)fractions.push(Math.floor(i));let promiseArray=fractions.map((time,index)=>getVideoThumbnail(videoFile,index>=fractions.length-1?time-2:time));await Promise.all(promiseArray).then(res=>{res.forEach(res=>{thumbnail.push(res)}),resolve(thumbnail)}).catch(err=>{reject(err)}).finally(()=>resolve(thumbnail))}).catch(err=>{reject(err)}),reject("something went wrong")}:async(resolve,reject)=>{await(0,exports.getVideoDurationFromVideoFile)(videoFile).then(async duration=>{console.log("duration",duration);for(let i=0;i<=duration;i+=duration/numberOfThumbnails)fractions.push(Math.floor(i));let promiseArray=fractions.map((time,index)=>getVideoThumbnail(videoFile,index>=fractions.length-1?time-2:time));await Promise.all(promiseArray).then(res=>{res.forEach(res=>{thumbnail.push(res)}),resolve(thumbnail)}).catch(err=>{reject(err)}).finally(()=>resolve(thumbnail))}),reject("something went wrong")})};exports.generateVideoThumbnails=generateVideoThumbnails;const getVideoThumbnail=(file,videoTimeInSeconds)=>new Promise((resolve,reject)=>{var _a;(null===(_a=null==file?void 0:file.type)||void 0===_a?void 0:_a.match("video"))?(0,exports.importFileandPreview)(file).then(urlOfFIle=>{(0,exports.getVideoCover)(urlOfFIle,videoTimeInSeconds).then(res=>{resolve(res)})}):file?(0,exports.getVideoCover)(file,videoTimeInSeconds).then(res=>{resolve(res)}).catch(err=>{reject(err)}):reject("file not valid")}),getVideoCover=(urlOfFIle,seekTo=0)=>new Promise((resolve,reject)=>{try{const videoPlayer=document.createElement("video");videoPlayer.setAttribute("src",urlOfFIle),videoPlayer.crossOrigin="Anonymous",videoPlayer.load(),videoPlayer.addEventListener("error",ex=>{reject(`error when loading video file ${ex}`)}),videoPlayer.addEventListener("loadedmetadata",()=>{videoPlayer.duration<seekTo?reject("video is too short."):(setTimeout(()=>{videoPlayer.currentTime=seekTo},200),videoPlayer.addEventListener("seeked",()=>{const canvas=document.createElement("canvas");canvas.width=videoPlayer.videoWidth,canvas.height=videoPlayer.videoHeight;const ctx=canvas.getContext("2d");ctx.drawImage(videoPlayer,0,0,canvas.width,canvas.height),ctx.canvas.toBlob(blob=>{var reader=new FileReader;reader.readAsDataURL(blob),reader.onloadend=function(){var base64data=reader.result;resolve(base64data)}},"image/jpeg",1)}))})}catch(error){reject(error)}});exports.getVideoCover=getVideoCover,exports.getVideoThumbnail=getVideoThumbnail;const generateVideoThumbnailViaUrl=(urlOfFIle,videoTimeInSeconds)=>new Promise((resolve,reject)=>{try{var video=document.createElement("video"),timeupdate=function(){snapImage()&&(video.removeEventListener("timeupdate",timeupdate),video.pause())};video.addEventListener("loadeddata",(function(){try{snapImage()&&video.removeEventListener("timeupdate",timeupdate)}catch(error){reject(error)}}));var snapImage=function(){var canvas=document.createElement("canvas");canvas.width=video.videoWidth,canvas.height=video.videoHeight,canvas.getContext("2d").drawImage(video,0,0,canvas.width,canvas.height);var image=canvas.toBlob(blob=>{var reader=new FileReader;reader.readAsDataURL(blob),reader.onloadend=function(){var base64data=reader.result;resolve(base64data)}},"image/jpeg",1),success=(null==image?void 0:image.length)>1e5;return success&&(URL.revokeObjectURL(urlOfFIle),resolve(image)),success};video.addEventListener("timeupdate",timeupdate),video.preload="metadata",video.src=urlOfFIle,video.muted=!0,video.playsInline=!0,video.crossOrigin="Anonymous",video.currentTime=videoTimeInSeconds,video.play().then().catch(err=>{reject({status:500,reason:`Access to video at ${urlOfFIle} from origin ${window.location.hostname} has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.`,message:err})})}catch(error){reject(error)}});exports.generateVideoThumbnailViaUrl=generateVideoThumbnailViaUrl;const getVideoDurationFromVideoFile=videoFile=>new Promise((resolve,reject)=>{var _a;try{videoFile?(null===(_a=null==videoFile?void 0:videoFile.type)||void 0===_a?void 0:_a.match("video"))?(0,exports.importFileandPreview)(videoFile).then(url=>{generateVideoDurationFromUrl(url).then(res=>{resolve(res)})}):generateVideoDurationFromUrl(videoFile).then(res=>{resolve(res)}):reject("Cannot generate video duration for this video file.")}catch(error){reject(error)}});exports.getVideoDurationFromVideoFile=getVideoDurationFromVideoFile;const generateVideoDurationFromUrl=url=>new Promise((resolve,reject)=>{let video=document.createElement("video");video.addEventListener("loadeddata",(function(){resolve(video.duration),window.URL.revokeObjectURL(url)})),video.preload="metadata",video.src=url,video.muted=!0,video.crossOrigin="Anonymous",video.playsInline=!0,video.play()});
