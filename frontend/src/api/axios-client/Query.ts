//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../axios-client';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions  } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import { Client as ClientClass } from '../axios-client';
import { createClient, getClientFactory } from './helpers';

export const Client = () => getClientFactory()(ClientClass);
import type { AxiosRequestConfig } from 'axios';

export type UsersQueryParameters = {
  id: string;
};

    
export function loginUrl(): string {
  let url_ = getBaseUrl() + "/api/Users/login";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function loginMutationKey(): MutationKey {
  return trimArrayEnd([
      'Client',
      'login',
    ]);
}

/**
 * @param body (optional) 
 * @return Success
 */
export function useLoginMutation<TContext>(options?: Omit<UseMutationOptions<string, unknown, Types.LoginDTO, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<string, unknown, Types.LoginDTO, TContext> {
  const key = loginMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
      return useMutation((body: Types.LoginDTO) => Client().login(body), {...options, mutationKey: key});
}
  
    
export function registerUrl(): string {
  let url_ = getBaseUrl() + "/api/Users/register";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function registerMutationKey(): MutationKey {
  return trimArrayEnd([
      'Client',
      'register',
    ]);
}

/**
 * @param body (optional) 
 * @return Success
 */
export function useRegisterMutation<TContext>(options?: Omit<UseMutationOptions<void, unknown, Types.RegisterDTO, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<void, unknown, Types.RegisterDTO, TContext> {
  const key = registerMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
      return useMutation((body: Types.RegisterDTO) => Client().register(body), {...options, mutationKey: key});
}
  
    
export function usersUrl(id: string): string {
  let url_ = getBaseUrl() + "/api/Users/{id}";

if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let usersDefaultOptions: UseQueryOptions<Types.User, unknown, Types.User> = {
  queryFn: __users,
};
export function getUsersDefaultOptions(): UseQueryOptions<Types.User, unknown, Types.User> {
  return usersDefaultOptions;
};
export function setUsersDefaultOptions(options: UseQueryOptions<Types.User, unknown, Types.User>) {
  usersDefaultOptions = options;
}

export function usersQueryKey(id: string): QueryKey;
export function usersQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { id,  } = params[0] as UsersQueryParameters;

    return trimArrayEnd([
        'Client',
        'users',
        id as any,
      ]);
  } else {
    return trimArrayEnd([
        'Client',
        'users',
        ...params
      ]);
  }
}
function __users(context: QueryFunctionContext) {
  return Client().users(
      context.queryKey[2] as string    );
}

export function useUsersQuery<TSelectData = Types.User, TError = unknown>(dto: UsersQueryParameters, options?: UseQueryOptions<Types.User, TError, TSelectData>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * @return Success
 */
export function useUsersQuery<TSelectData = Types.User, TError = unknown>(id: string, options?: UseQueryOptions<Types.User, TError, TSelectData>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useUsersQuery<TSelectData = Types.User, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.User, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined;
  let id: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ id,  } = params[0] as UsersQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [id, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  if (axiosConfig) {
    options = options ?? { } as any;
    options!.meta = { ...options!.meta, axiosConfig };
  }

  return useQuery<Types.User, TError, TSelectData>({
    queryFn: __users,
    queryKey: usersQueryKey(id),
    ...usersDefaultOptions as unknown as UseQueryOptions<Types.User, TError, TSelectData>,
    ...options,
  });
}
/**
 * @return Success
 */
export function setUsersData(queryClient: QueryClient, updater: (data: Types.User | undefined) => Types.User, id: string) {
  queryClient.setQueryData(usersQueryKey(id),
    updater
  );
}

/**
 * @return Success
 */
export function setUsersDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.User | undefined) => Types.User) {
  queryClient.setQueryData(queryKey, updater);
}