//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import type { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export * as Client from './axios-client/Client';

export * as Query from './axios-client/Query';



//-----Types.File-----
export class ChannelDTO implements IChannelDTO {
    id?: string;
    name?: string;
    subscribersCount?: number;
    posterUrl?: string | null;
    pinnedVideoId?: string | null;
    pinnedVideo?: Video;
    avatarUrl?: string | null;

    constructor(data?: IChannelDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.subscribersCount = _data["subscribersCount"];
            this.posterUrl = _data["posterUrl"];
            this.pinnedVideoId = _data["pinnedVideoId"];
            this.pinnedVideo = _data["pinnedVideo"] ? Video.fromJS(_data["pinnedVideo"]) : <any>null;
            this.avatarUrl = _data["avatarUrl"];
        }
    }

    static fromJS(data: any): ChannelDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ChannelDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["subscribersCount"] = this.subscribersCount;
        data["posterUrl"] = this.posterUrl;
        data["pinnedVideoId"] = this.pinnedVideoId;
        data["pinnedVideo"] = this.pinnedVideo ? this.pinnedVideo.toJSON() : <any>null;
        data["avatarUrl"] = this.avatarUrl;
        return data;
    }
}

export interface IChannelDTO {
    id?: string;
    name?: string;
    subscribersCount?: number;
    posterUrl?: string | null;
    pinnedVideoId?: string | null;
    pinnedVideo?: Video;
    avatarUrl?: string | null;
}

export class LoginDTO implements ILoginDTO {
    email?: string;
    password?: string;

    constructor(data?: ILoginDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginDTO {
        data = typeof data === 'object' ? data : {};
        let result = new LoginDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginDTO {
    email?: string;
    password?: string;
}

export enum Privileges {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export class RegisterDTO implements IRegisterDTO {
    name?: string;
    email?: string;
    password?: string;

    constructor(data?: IRegisterDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): RegisterDTO {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface IRegisterDTO {
    name?: string;
    email?: string;
    password?: string;
}

export class Tag implements ITag {
    id?: number;
    name?: string;

    constructor(data?: ITag) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Tag {
        data = typeof data === 'object' ? data : {};
        let result = new Tag();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface ITag {
    id?: number;
    name?: string;
}

export class UserDTO implements IUserDTO {
    id?: string;
    name?: string;
    email?: string;
    initials?: string;
    rights?: Privileges;

    constructor(data?: IUserDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.initials = _data["initials"];
            this.rights = _data["rights"];
        }
    }

    static fromJS(data: any): UserDTO {
        data = typeof data === 'object' ? data : {};
        let result = new UserDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["email"] = this.email;
        data["initials"] = this.initials;
        data["rights"] = this.rights;
        return data;
    }
}

export interface IUserDTO {
    id?: string;
    name?: string;
    email?: string;
    initials?: string;
    rights?: Privileges;
}

export class Video implements IVideo {
    id?: string;
    name?: string;
    imageUrl?: string;
    duration?: TimeSpan;
    description?: string | null;
    dataUrl?: string;
    likeCount?: number;
    dislikeCount?: number;
    views?: number;
    uploadTimestamp?: Date;
    tags?: Tag[] | null;
    channelId?: string;

    constructor(data?: IVideo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.imageUrl = _data["imageUrl"];
            this.duration = _data["duration"] ? TimeSpan.fromJS(_data["duration"]) : <any>null;
            this.description = _data["description"];
            this.dataUrl = _data["dataUrl"];
            this.likeCount = _data["likeCount"];
            this.dislikeCount = _data["dislikeCount"];
            this.views = _data["views"];
            this.uploadTimestamp = _data["uploadTimestamp"] ? new Date(_data["uploadTimestamp"].toString()) : <any>null;
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(Tag.fromJS(item));
            }
            this.channelId = _data["channelId"];
        }
    }

    static fromJS(data: any): Video {
        data = typeof data === 'object' ? data : {};
        let result = new Video();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["imageUrl"] = this.imageUrl;
        data["duration"] = this.duration ? this.duration.toJSON() : <any>null;
        data["description"] = this.description;
        data["dataUrl"] = this.dataUrl;
        data["likeCount"] = this.likeCount;
        data["dislikeCount"] = this.dislikeCount;
        data["views"] = this.views;
        data["uploadTimestamp"] = this.uploadTimestamp && this.uploadTimestamp.toISOString();
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item.toJSON());
        }
        data["channelId"] = this.channelId;
        return data;
    }
}

export interface IVideo {
    id?: string;
    name?: string;
    imageUrl?: string;
    duration?: TimeSpan;
    description?: string | null;
    dataUrl?: string;
    likeCount?: number;
    dislikeCount?: number;
    views?: number;
    uploadTimestamp?: Date;
    tags?: Tag[] | null;
    channelId?: string;
}

export class TimeSpan implements ITimeSpan {
    ticks?: number;
    readonly days?: number;
    readonly hours?: number;
    readonly milliseconds?: number;
    readonly minutes?: number;
    readonly seconds?: number;
    readonly totalDays?: number;
    readonly totalHours?: number;
    readonly totalMilliseconds?: number;
    readonly totalMinutes?: number;
    readonly totalSeconds?: number;

    constructor(data?: ITimeSpan) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ticks = _data["ticks"];
            (<any>this).days = _data["days"];
            (<any>this).hours = _data["hours"];
            (<any>this).milliseconds = _data["milliseconds"];
            (<any>this).minutes = _data["minutes"];
            (<any>this).seconds = _data["seconds"];
            (<any>this).totalDays = _data["totalDays"];
            (<any>this).totalHours = _data["totalHours"];
            (<any>this).totalMilliseconds = _data["totalMilliseconds"];
            (<any>this).totalMinutes = _data["totalMinutes"];
            (<any>this).totalSeconds = _data["totalSeconds"];
        }
    }

    static fromJS(data: any): TimeSpan {
        data = typeof data === 'object' ? data : {};
        let result = new TimeSpan();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ticks"] = this.ticks;
        data["days"] = this.days;
        data["hours"] = this.hours;
        data["milliseconds"] = this.milliseconds;
        data["minutes"] = this.minutes;
        data["seconds"] = this.seconds;
        data["totalDays"] = this.totalDays;
        data["totalHours"] = this.totalHours;
        data["totalMilliseconds"] = this.totalMilliseconds;
        data["totalMinutes"] = this.totalMinutes;
        data["totalSeconds"] = this.totalSeconds;
        return data;
    }
}

export interface ITimeSpan {
    ticks?: number;
    days?: number;
    hours?: number;
    milliseconds?: number;
    minutes?: number;
    seconds?: number;
    totalDays?: number;
    totalHours?: number;
    totalMilliseconds?: number;
    totalMinutes?: number;
    totalSeconds?: number;
}
//-----/CustomTypes.File-----

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

export function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

export function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}

//-----/Types.File-----

import { addResultTypeFactory } from './axios-client/helpers';
export { setBaseUrl, getBaseUrl } from './axios-client/helpers';
export { setAxiosFactory, getAxios } from './axios-client/helpers';


//-----PersistorHydrator.File-----
import type { PersistedClient } from '@tanstack/react-query-persist-client';
import type { DehydratedState, QueryKey } from '@tanstack/react-query'
import { getResultTypeFactory } from './axios-client/helpers';

/*
 * If you have Dates in QueryKeys (i.e. in request parameters), you need to deserialize them to Dates correctly
 * (otherwise they are deserialized as strings by default, and your queries are broken).
 */
export function deserializeDate(str: unknown) {
  if (!str || typeof str !== 'string') return str;
  if (!/^\d\d\d\d\-\d\d\-\d\d/.test(str)) return str;
  
  const date = new Date(str);
  const isDate = date instanceof Date && !isNaN(date as any);
  
  return isDate ? date : str;
}

export function deserializeDatesInQueryKeys(queryKey: QueryKey) {
  return queryKey
    // We need to replace `null` with `undefined` in query key, because
    // `undefined` is serialized as `null`.
    // And most probably if we have `null` in QueryKey it actually means `undefined`.
    // We can't keep nulls, because they have a different meaning, and e.g. boolean parameters are not allowed to be null.
    .map(x => (x === null ? undefined : x))
    .map(x => deserializeDate(x));
}

export function deserializeClassesInQueryData(queryKey: QueryKey, data: any) {
  if (!data) {
    return data;
  } else if (typeof data !== 'object') {
    return data;
  } else if ('pages' in data && 'pageParams' in data && Array.isArray(data.pages) && Array.isArray(data.pageParams)) {
    // infinite query
    data.pages = data.pages.map((page:any) => deserializeClassesInQueryData(queryKey, page));
  } else if (Array.isArray(data)) {
    return data.map(elem => constructDtoClass(queryKey, elem));
  } else {
    return constructDtoClass(queryKey, data);
  }
}

/*
 * Pass this function as `deserialize` option to createSyncStoragePersister/createAsyncStoragePersister
 * to correctly deserialize your DTOs (including Dates)
 */
export function persisterDeserialize(cache: string): PersistedClient {
  const client: PersistedClient = JSON.parse(cache);
  client.clientState.queries.forEach((query) => {
    query.state.data = deserializeClassesInQueryData(query.queryKey, query.state.data);
    query.queryKey = deserializeDatesInQueryKeys(query.queryKey);
  });

  return client;
}

export function constructDtoClass(queryKey: QueryKey, data: any): unknown {
  const resultTypeKey = getResultTypeClassKey(queryKey);
  const constructorFunction = getResultTypeFactory(resultTypeKey);

  if (!data || !constructorFunction)
    return data;

  return constructorFunction(data);
}

export function getResultTypeClassKey(queryKey: QueryKey): string {
  if (!Array.isArray(queryKey)) {
    return queryKey as unknown as string;
  }
  if (queryKey.length >= 2) {
    // We concatenate first and second elements, because they uniquely identify the query.
    // All other QueryKey elements are query parameters
    return `${queryKey[0]}___${queryKey[1]}`;
  }

  // We actually should never reach this point :)
  return queryKey.join('___');
}

export function initPersister() {
  
  addResultTypeFactory('Client___myChannels', (data: any) => { const result = new ChannelDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___channelsGET', (data: any) => { const result = new ChannelDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___me', (data: any) => { const result = new UserDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___videosAll', (data: any) => { const result = new Video(); result.init(data); return result; });
  addResultTypeFactory('Client___videosGET', (data: any) => { const result = new Video(); result.init(data); return result; });


}
//-----/PersistorHydrator.File----