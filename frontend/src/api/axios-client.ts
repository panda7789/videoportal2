//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import type { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export * as Client from './axios-client/Client';

export * as Query from './axios-client/Query';



//-----Types.File-----
export class Channel implements IChannel {
    id!: string;
    name!: string;
    subscribersCount!: number;
    posterUrl?: string | undefined;
    pinnedVideoId?: string | undefined;
    pinnedVideo?: Video | undefined;
    avatarUrl?: string | undefined;
    owner!: User;
    idOwner!: string;

    constructor(data?: IChannel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.owner = new User();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.subscribersCount = _data["subscribersCount"];
            this.posterUrl = _data["posterUrl"];
            this.pinnedVideoId = _data["pinnedVideoId"];
            this.pinnedVideo = _data["pinnedVideo"] ? Video.fromJS(_data["pinnedVideo"]) : <any>undefined;
            this.avatarUrl = _data["avatarUrl"];
            this.owner = _data["owner"] ? User.fromJS(_data["owner"]) : new User();
            this.idOwner = _data["idOwner"];
        }
    }

    static fromJS(data: any): Channel {
        data = typeof data === 'object' ? data : {};
        let result = new Channel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["subscribersCount"] = this.subscribersCount;
        data["posterUrl"] = this.posterUrl;
        data["pinnedVideoId"] = this.pinnedVideoId;
        data["pinnedVideo"] = this.pinnedVideo ? this.pinnedVideo.toJSON() : <any>undefined;
        data["avatarUrl"] = this.avatarUrl;
        data["owner"] = this.owner ? this.owner.toJSON() : <any>undefined;
        data["idOwner"] = this.idOwner;
        return data;
    }
}

export interface IChannel {
    id: string;
    name: string;
    subscribersCount: number;
    posterUrl?: string | undefined;
    pinnedVideoId?: string | undefined;
    pinnedVideo?: Video | undefined;
    avatarUrl?: string | undefined;
    owner: User;
    idOwner: string;
}

export class ChannelAdvancedInfoDTO implements IChannelAdvancedInfoDTO {
    channelId!: string;
    description?: string | undefined;
    dateOfRegistration!: Date;
    email?: string | undefined;
    relatedChannels?: ChannelDTO[] | undefined;

    constructor(data?: IChannelAdvancedInfoDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.channelId = _data["channelId"];
            this.description = _data["description"];
            this.dateOfRegistration = _data["dateOfRegistration"] ? new Date(_data["dateOfRegistration"].toString()) : <any>undefined;
            this.email = _data["email"];
            if (Array.isArray(_data["relatedChannels"])) {
                this.relatedChannels = [] as any;
                for (let item of _data["relatedChannels"])
                    this.relatedChannels!.push(ChannelDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ChannelAdvancedInfoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ChannelAdvancedInfoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["channelId"] = this.channelId;
        data["description"] = this.description;
        data["dateOfRegistration"] = this.dateOfRegistration ? this.dateOfRegistration.toISOString() : <any>undefined;
        data["email"] = this.email;
        if (Array.isArray(this.relatedChannels)) {
            data["relatedChannels"] = [];
            for (let item of this.relatedChannels)
                data["relatedChannels"].push(item.toJSON());
        }
        return data;
    }
}

export interface IChannelAdvancedInfoDTO {
    channelId: string;
    description?: string | undefined;
    dateOfRegistration: Date;
    email?: string | undefined;
    relatedChannels?: ChannelDTO[] | undefined;
}

export class ChannelDTO implements IChannelDTO {
    id!: string;
    name!: string;
    subscribersCount!: number;
    posterUrl?: string | undefined;
    pinnedVideoId?: string | undefined;
    pinnedVideo?: Video | undefined;
    avatarUrl?: string | undefined;

    constructor(data?: IChannelDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.subscribersCount = _data["subscribersCount"];
            this.posterUrl = _data["posterUrl"];
            this.pinnedVideoId = _data["pinnedVideoId"];
            this.pinnedVideo = _data["pinnedVideo"] ? Video.fromJS(_data["pinnedVideo"]) : <any>undefined;
            this.avatarUrl = _data["avatarUrl"];
        }
    }

    static fromJS(data: any): ChannelDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ChannelDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["subscribersCount"] = this.subscribersCount;
        data["posterUrl"] = this.posterUrl;
        data["pinnedVideoId"] = this.pinnedVideoId;
        data["pinnedVideo"] = this.pinnedVideo ? this.pinnedVideo.toJSON() : <any>undefined;
        data["avatarUrl"] = this.avatarUrl;
        return data;
    }
}

export interface IChannelDTO {
    id: string;
    name: string;
    subscribersCount: number;
    posterUrl?: string | undefined;
    pinnedVideoId?: string | undefined;
    pinnedVideo?: Video | undefined;
    avatarUrl?: string | undefined;
}

export class ChannelUserSpecificInfoDTO implements IChannelUserSpecificInfoDTO {
    subscribed!: boolean;

    constructor(data?: IChannelUserSpecificInfoDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.subscribed = _data["subscribed"];
        }
    }

    static fromJS(data: any): ChannelUserSpecificInfoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ChannelUserSpecificInfoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["subscribed"] = this.subscribed;
        return data;
    }
}

export interface IChannelUserSpecificInfoDTO {
    subscribed: boolean;
}

export class CommentDTO implements ICommentDTO {
    id!: string;
    userId!: string;
    videoId!: string;
    text!: string;
    created!: Date;
    user!: UserDTO;

    constructor(data?: ICommentDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.user = new UserDTO();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.videoId = _data["videoId"];
            this.text = _data["text"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.user = _data["user"] ? UserDTO.fromJS(_data["user"]) : new UserDTO();
        }
    }

    static fromJS(data: any): CommentDTO {
        data = typeof data === 'object' ? data : {};
        let result = new CommentDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["videoId"] = this.videoId;
        data["text"] = this.text;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICommentDTO {
    id: string;
    userId: string;
    videoId: string;
    text: string;
    created: Date;
    user: UserDTO;
}

export class CommentPostDTO implements ICommentPostDTO {
    videoId!: string;
    text!: string;

    constructor(data?: ICommentPostDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.videoId = _data["videoId"];
            this.text = _data["text"];
        }
    }

    static fromJS(data: any): CommentPostDTO {
        data = typeof data === 'object' ? data : {};
        let result = new CommentPostDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["videoId"] = this.videoId;
        data["text"] = this.text;
        return data;
    }
}

export interface ICommentPostDTO {
    videoId: string;
    text: string;
}

export class CommentPutDTO implements ICommentPutDTO {
    text!: string;

    constructor(data?: ICommentPutDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.text = _data["text"];
        }
    }

    static fromJS(data: any): CommentPutDTO {
        data = typeof data === 'object' ? data : {};
        let result = new CommentPutDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["text"] = this.text;
        return data;
    }
}

export interface ICommentPutDTO {
    text: string;
}

export class LoginDTO implements ILoginDTO {
    email!: string;
    password!: string;

    constructor(data?: ILoginDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginDTO {
        data = typeof data === 'object' ? data : {};
        let result = new LoginDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginDTO {
    email: string;
    password: string;
}

export class Playlist implements IPlaylist {
    id!: string;
    name!: string;
    createdTimestamp!: Date;
    description?: string | undefined;
    thumbnailUrl?: string | undefined;
    videos?: Video[] | undefined;
    owner!: User;
    idOwner!: string;
    channel?: Channel | undefined;
    channelId?: string | undefined;

    constructor(data?: IPlaylist) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.owner = new User();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.createdTimestamp = _data["createdTimestamp"] ? new Date(_data["createdTimestamp"].toString()) : <any>undefined;
            this.description = _data["description"];
            this.thumbnailUrl = _data["thumbnailUrl"];
            if (Array.isArray(_data["videos"])) {
                this.videos = [] as any;
                for (let item of _data["videos"])
                    this.videos!.push(Video.fromJS(item));
            }
            this.owner = _data["owner"] ? User.fromJS(_data["owner"]) : new User();
            this.idOwner = _data["idOwner"];
            this.channel = _data["channel"] ? Channel.fromJS(_data["channel"]) : <any>undefined;
            this.channelId = _data["channelId"];
        }
    }

    static fromJS(data: any): Playlist {
        data = typeof data === 'object' ? data : {};
        let result = new Playlist();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["createdTimestamp"] = this.createdTimestamp ? this.createdTimestamp.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["thumbnailUrl"] = this.thumbnailUrl;
        if (Array.isArray(this.videos)) {
            data["videos"] = [];
            for (let item of this.videos)
                data["videos"].push(item.toJSON());
        }
        data["owner"] = this.owner ? this.owner.toJSON() : <any>undefined;
        data["idOwner"] = this.idOwner;
        data["channel"] = this.channel ? this.channel.toJSON() : <any>undefined;
        data["channelId"] = this.channelId;
        return data;
    }
}

export interface IPlaylist {
    id: string;
    name: string;
    createdTimestamp: Date;
    description?: string | undefined;
    thumbnailUrl?: string | undefined;
    videos?: Video[] | undefined;
    owner: User;
    idOwner: string;
    channel?: Channel | undefined;
    channelId?: string | undefined;
}

export class PlaylistDTO implements IPlaylistDTO {
    id!: string;
    name!: string;
    createdTimestamp!: Date;
    description?: string | undefined;
    thumbnailUrl?: string | undefined;
    videos?: VideoDTO[] | undefined;
    ownerId!: string;
    channel?: Channel | undefined;
    totalDuration!: string;

    constructor(data?: IPlaylistDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.createdTimestamp = _data["createdTimestamp"] ? new Date(_data["createdTimestamp"].toString()) : <any>undefined;
            this.description = _data["description"];
            this.thumbnailUrl = _data["thumbnailUrl"];
            if (Array.isArray(_data["videos"])) {
                this.videos = [] as any;
                for (let item of _data["videos"])
                    this.videos!.push(VideoDTO.fromJS(item));
            }
            this.ownerId = _data["ownerId"];
            this.channel = _data["channel"] ? Channel.fromJS(_data["channel"]) : <any>undefined;
            this.totalDuration = _data["totalDuration"];
        }
    }

    static fromJS(data: any): PlaylistDTO {
        data = typeof data === 'object' ? data : {};
        let result = new PlaylistDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["createdTimestamp"] = this.createdTimestamp ? this.createdTimestamp.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["thumbnailUrl"] = this.thumbnailUrl;
        if (Array.isArray(this.videos)) {
            data["videos"] = [];
            for (let item of this.videos)
                data["videos"].push(item.toJSON());
        }
        data["ownerId"] = this.ownerId;
        data["channel"] = this.channel ? this.channel.toJSON() : <any>undefined;
        data["totalDuration"] = this.totalDuration;
        return data;
    }
}

export interface IPlaylistDTO {
    id: string;
    name: string;
    createdTimestamp: Date;
    description?: string | undefined;
    thumbnailUrl?: string | undefined;
    videos?: VideoDTO[] | undefined;
    ownerId: string;
    channel?: Channel | undefined;
    totalDuration: string;
}

export class PostVideoResponse implements IPostVideoResponse {
    dataUrl!: string;

    constructor(data?: IPostVideoResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dataUrl = _data["dataUrl"];
        }
    }

    static fromJS(data: any): PostVideoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PostVideoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataUrl"] = this.dataUrl;
        return data;
    }
}

export interface IPostVideoResponse {
    dataUrl: string;
}

export class RegisterDTO implements IRegisterDTO {
    name!: string;
    email!: string;
    password!: string;

    constructor(data?: IRegisterDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): RegisterDTO {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface IRegisterDTO {
    name: string;
    email: string;
    password: string;
}

export class Tag implements ITag {
    id!: string;
    name!: string;
    videos!: Video[];

    constructor(data?: ITag) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.videos = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["videos"])) {
                this.videos = [] as any;
                for (let item of _data["videos"])
                    this.videos!.push(Video.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Tag {
        data = typeof data === 'object' ? data : {};
        let result = new Tag();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.videos)) {
            data["videos"] = [];
            for (let item of this.videos)
                data["videos"].push(item.toJSON());
        }
        return data;
    }
}

export interface ITag {
    id: string;
    name: string;
    videos: Video[];
}

export class TagDTO implements ITagDTO {
    id!: string;
    name!: string;

    constructor(data?: ITagDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): TagDTO {
        data = typeof data === 'object' ? data : {};
        let result = new TagDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface ITagDTO {
    id: string;
    name: string;
}

export class User implements IUser {
    id!: string;
    userName?: string | undefined;
    normalizedUserName?: string | undefined;
    email?: string | undefined;
    normalizedEmail?: string | undefined;
    emailConfirmed!: boolean;
    passwordHash?: string | undefined;
    securityStamp?: string | undefined;
    concurrencyStamp?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed!: boolean;
    twoFactorEnabled!: boolean;
    lockoutEnd?: Date | undefined;
    lockoutEnabled!: boolean;
    accessFailedCount!: number;
    name!: string;
    initials!: string;
    roles!: UserRoles;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.roles = new UserRoles();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.normalizedUserName = _data["normalizedUserName"];
            this.email = _data["email"];
            this.normalizedEmail = _data["normalizedEmail"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.passwordHash = _data["passwordHash"];
            this.securityStamp = _data["securityStamp"];
            this.concurrencyStamp = _data["concurrencyStamp"];
            this.phoneNumber = _data["phoneNumber"];
            this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
            this.twoFactorEnabled = _data["twoFactorEnabled"];
            this.lockoutEnd = _data["lockoutEnd"] ? new Date(_data["lockoutEnd"].toString()) : <any>undefined;
            this.lockoutEnabled = _data["lockoutEnabled"];
            this.accessFailedCount = _data["accessFailedCount"];
            this.name = _data["name"];
            this.initials = _data["initials"];
            this.roles = _data["roles"] ? UserRoles.fromJS(_data["roles"]) : new UserRoles();
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["normalizedUserName"] = this.normalizedUserName;
        data["email"] = this.email;
        data["normalizedEmail"] = this.normalizedEmail;
        data["emailConfirmed"] = this.emailConfirmed;
        data["passwordHash"] = this.passwordHash;
        data["securityStamp"] = this.securityStamp;
        data["concurrencyStamp"] = this.concurrencyStamp;
        data["phoneNumber"] = this.phoneNumber;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["twoFactorEnabled"] = this.twoFactorEnabled;
        data["lockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toISOString() : <any>undefined;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["accessFailedCount"] = this.accessFailedCount;
        data["name"] = this.name;
        data["initials"] = this.initials;
        data["roles"] = this.roles ? this.roles.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUser {
    id: string;
    userName?: string | undefined;
    normalizedUserName?: string | undefined;
    email?: string | undefined;
    normalizedEmail?: string | undefined;
    emailConfirmed: boolean;
    passwordHash?: string | undefined;
    securityStamp?: string | undefined;
    concurrencyStamp?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed: boolean;
    twoFactorEnabled: boolean;
    lockoutEnd?: Date | undefined;
    lockoutEnabled: boolean;
    accessFailedCount: number;
    name: string;
    initials: string;
    roles: UserRoles;
}

export class UserDTO implements IUserDTO {
    id!: string;
    name!: string;
    email!: string;
    initials!: string;
    roles!: UserRoles;

    constructor(data?: IUserDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.roles = new UserRoles();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.initials = _data["initials"];
            this.roles = _data["roles"] ? UserRoles.fromJS(_data["roles"]) : new UserRoles();
        }
    }

    static fromJS(data: any): UserDTO {
        data = typeof data === 'object' ? data : {};
        let result = new UserDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["email"] = this.email;
        data["initials"] = this.initials;
        data["roles"] = this.roles ? this.roles.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUserDTO {
    id: string;
    name: string;
    email: string;
    initials: string;
    roles: UserRoles;
}

export class UserRoles implements IUserRoles {
    user!: boolean;
    videoEditor!: boolean;
    administrator!: boolean;

    constructor(data?: IUserRoles) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.user = _data["user"];
            this.videoEditor = _data["videoEditor"];
            this.administrator = _data["administrator"];
        }
    }

    static fromJS(data: any): UserRoles {
        data = typeof data === 'object' ? data : {};
        let result = new UserRoles();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user;
        data["videoEditor"] = this.videoEditor;
        data["administrator"] = this.administrator;
        return data;
    }
}

export interface IUserRoles {
    user: boolean;
    videoEditor: boolean;
    administrator: boolean;
}

export class UserVideoStats implements IUserVideoStats {
    like!: boolean;
    dislike!: boolean;
    addedToPlaylist!: boolean;
    timeWatchedSec!: number;
    userId!: string;
    videoId!: string;

    constructor(data?: IUserVideoStats) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.like = _data["like"];
            this.dislike = _data["dislike"];
            this.addedToPlaylist = _data["addedToPlaylist"];
            this.timeWatchedSec = _data["timeWatchedSec"];
            this.userId = _data["userId"];
            this.videoId = _data["videoId"];
        }
    }

    static fromJS(data: any): UserVideoStats {
        data = typeof data === 'object' ? data : {};
        let result = new UserVideoStats();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["like"] = this.like;
        data["dislike"] = this.dislike;
        data["addedToPlaylist"] = this.addedToPlaylist;
        data["timeWatchedSec"] = this.timeWatchedSec;
        data["userId"] = this.userId;
        data["videoId"] = this.videoId;
        return data;
    }
}

export interface IUserVideoStats {
    like: boolean;
    dislike: boolean;
    addedToPlaylist: boolean;
    timeWatchedSec: number;
    userId: string;
    videoId: string;
}

export class Video implements IVideo {
    id!: string;
    name!: string;
    imageUrl!: string;
    duration!: string;
    description?: string | undefined;
    dataUrl!: string;
    likeCount!: number;
    dislikeCount!: number;
    views!: number;
    uploadTimestamp!: Date;
    tags?: Tag[] | undefined;
    channelId!: string;
    channel!: Channel;
    playlists?: Playlist[] | undefined;

    constructor(data?: IVideo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.channel = new Channel();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.imageUrl = _data["imageUrl"];
            this.duration = _data["duration"];
            this.description = _data["description"];
            this.dataUrl = _data["dataUrl"];
            this.likeCount = _data["likeCount"];
            this.dislikeCount = _data["dislikeCount"];
            this.views = _data["views"];
            this.uploadTimestamp = _data["uploadTimestamp"] ? new Date(_data["uploadTimestamp"].toString()) : <any>undefined;
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(Tag.fromJS(item));
            }
            this.channelId = _data["channelId"];
            this.channel = _data["channel"] ? Channel.fromJS(_data["channel"]) : new Channel();
            if (Array.isArray(_data["playlists"])) {
                this.playlists = [] as any;
                for (let item of _data["playlists"])
                    this.playlists!.push(Playlist.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Video {
        data = typeof data === 'object' ? data : {};
        let result = new Video();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["imageUrl"] = this.imageUrl;
        data["duration"] = this.duration;
        data["description"] = this.description;
        data["dataUrl"] = this.dataUrl;
        data["likeCount"] = this.likeCount;
        data["dislikeCount"] = this.dislikeCount;
        data["views"] = this.views;
        data["uploadTimestamp"] = this.uploadTimestamp ? this.uploadTimestamp.toISOString() : <any>undefined;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item.toJSON());
        }
        data["channelId"] = this.channelId;
        data["channel"] = this.channel ? this.channel.toJSON() : <any>undefined;
        if (Array.isArray(this.playlists)) {
            data["playlists"] = [];
            for (let item of this.playlists)
                data["playlists"].push(item.toJSON());
        }
        return data;
    }
}

export interface IVideo {
    id: string;
    name: string;
    imageUrl: string;
    duration: string;
    description?: string | undefined;
    dataUrl: string;
    likeCount: number;
    dislikeCount: number;
    views: number;
    uploadTimestamp: Date;
    tags?: Tag[] | undefined;
    channelId: string;
    channel: Channel;
    playlists?: Playlist[] | undefined;
}

export class VideoDTO implements IVideoDTO {
    id!: string;
    name!: string;
    imageUrl!: string;
    duration!: string;
    description?: string | undefined;
    dataUrl!: string;
    likeCount!: number;
    dislikeCount!: number;
    views!: number;
    uploadTimestamp!: Date;
    tags?: Tag[] | undefined;
    channelId!: string;
    channel!: Channel;
    playlists?: Playlist[] | undefined;
    channelName!: string;
    channelAvatarUrl?: string | undefined;

    constructor(data?: IVideoDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.channel = new Channel();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.imageUrl = _data["imageUrl"];
            this.duration = _data["duration"];
            this.description = _data["description"];
            this.dataUrl = _data["dataUrl"];
            this.likeCount = _data["likeCount"];
            this.dislikeCount = _data["dislikeCount"];
            this.views = _data["views"];
            this.uploadTimestamp = _data["uploadTimestamp"] ? new Date(_data["uploadTimestamp"].toString()) : <any>undefined;
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(Tag.fromJS(item));
            }
            this.channelId = _data["channelId"];
            this.channel = _data["channel"] ? Channel.fromJS(_data["channel"]) : new Channel();
            if (Array.isArray(_data["playlists"])) {
                this.playlists = [] as any;
                for (let item of _data["playlists"])
                    this.playlists!.push(Playlist.fromJS(item));
            }
            this.channelName = _data["channelName"];
            this.channelAvatarUrl = _data["channelAvatarUrl"];
        }
    }

    static fromJS(data: any): VideoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new VideoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["imageUrl"] = this.imageUrl;
        data["duration"] = this.duration;
        data["description"] = this.description;
        data["dataUrl"] = this.dataUrl;
        data["likeCount"] = this.likeCount;
        data["dislikeCount"] = this.dislikeCount;
        data["views"] = this.views;
        data["uploadTimestamp"] = this.uploadTimestamp ? this.uploadTimestamp.toISOString() : <any>undefined;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item.toJSON());
        }
        data["channelId"] = this.channelId;
        data["channel"] = this.channel ? this.channel.toJSON() : <any>undefined;
        if (Array.isArray(this.playlists)) {
            data["playlists"] = [];
            for (let item of this.playlists)
                data["playlists"].push(item.toJSON());
        }
        data["channelName"] = this.channelName;
        data["channelAvatarUrl"] = this.channelAvatarUrl;
        return data;
    }
}

export interface IVideoDTO {
    id: string;
    name: string;
    imageUrl: string;
    duration: string;
    description?: string | undefined;
    dataUrl: string;
    likeCount: number;
    dislikeCount: number;
    views: number;
    uploadTimestamp: Date;
    tags?: Tag[] | undefined;
    channelId: string;
    channel: Channel;
    playlists?: Playlist[] | undefined;
    channelName: string;
    channelAvatarUrl?: string | undefined;
}

export class WithTotalCountOfPlaylistDTO implements IWithTotalCountOfPlaylistDTO {
    items!: PlaylistDTO[];
    totalCount!: number;

    constructor(data?: IWithTotalCountOfPlaylistDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.items = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PlaylistDTO.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): WithTotalCountOfPlaylistDTO {
        data = typeof data === 'object' ? data : {};
        let result = new WithTotalCountOfPlaylistDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }
}

export interface IWithTotalCountOfPlaylistDTO {
    items: PlaylistDTO[];
    totalCount: number;
}

export class WithTotalCountOfVideoDTO implements IWithTotalCountOfVideoDTO {
    items!: VideoDTO[];
    totalCount!: number;

    constructor(data?: IWithTotalCountOfVideoDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.items = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(VideoDTO.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): WithTotalCountOfVideoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new WithTotalCountOfVideoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }
}

export interface IWithTotalCountOfVideoDTO {
    items: VideoDTO[];
    totalCount: number;
}
//-----/CustomTypes.File-----

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

export function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

export function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}

//-----/Types.File-----

import { addResultTypeFactory } from './axios-client/helpers';
export { setBaseUrl, getBaseUrl } from './axios-client/helpers';
export { setAxiosFactory, getAxios } from './axios-client/helpers';


//-----PersistorHydrator.File-----
import type { PersistedClient } from '@tanstack/react-query-persist-client';
import type { DehydratedState, QueryKey } from '@tanstack/react-query'
import { getResultTypeFactory } from './axios-client/helpers';

/*
 * If you have Dates in QueryKeys (i.e. in request parameters), you need to deserialize them to Dates correctly
 * (otherwise they are deserialized as strings by default, and your queries are broken).
 */
export function deserializeDate(str: unknown) {
  if (!str || typeof str !== 'string') return str;
  if (!/^\d\d\d\d\-\d\d\-\d\d/.test(str)) return str;
  
  const date = new Date(str);
  const isDate = date instanceof Date && !isNaN(date as any);
  
  return isDate ? date : str;
}

export function deserializeDatesInQueryKeys(queryKey: QueryKey) {
  return queryKey
    // We need to replace `null` with `undefined` in query key, because
    // `undefined` is serialized as `null`.
    // And most probably if we have `null` in QueryKey it actually means `undefined`.
    // We can't keep nulls, because they have a different meaning, and e.g. boolean parameters are not allowed to be null.
    .map(x => (x === null ? undefined : x))
    .map(x => deserializeDate(x));
}

export function deserializeClassesInQueryData(queryKey: QueryKey, data: any) {
  if (!data) {
    return data;
  } else if (typeof data !== 'object') {
    return data;
  } else if ('pages' in data && 'pageParams' in data && Array.isArray(data.pages) && Array.isArray(data.pageParams)) {
    // infinite query
    data.pages = data.pages.map((page:any) => deserializeClassesInQueryData(queryKey, page));
  } else if (Array.isArray(data)) {
    return data.map(elem => constructDtoClass(queryKey, elem));
  } else {
    return constructDtoClass(queryKey, data);
  }
}

/*
 * Pass this function as `deserialize` option to createSyncStoragePersister/createAsyncStoragePersister
 * to correctly deserialize your DTOs (including Dates)
 */
export function persisterDeserialize(cache: string): PersistedClient {
  const client: PersistedClient = JSON.parse(cache);
  client.clientState.queries.forEach((query) => {
    query.state.data = deserializeClassesInQueryData(query.queryKey, query.state.data);
    query.queryKey = deserializeDatesInQueryKeys(query.queryKey);
  });

  return client;
}

export function constructDtoClass(queryKey: QueryKey, data: any): unknown {
  const resultTypeKey = getResultTypeClassKey(queryKey);
  const constructorFunction = getResultTypeFactory(resultTypeKey);

  if (!data || !constructorFunction)
    return data;

  return constructorFunction(data);
}

export function getResultTypeClassKey(queryKey: QueryKey): string {
  if (!Array.isArray(queryKey)) {
    return queryKey as unknown as string;
  }
  if (queryKey.length >= 2) {
    // We concatenate first and second elements, because they uniquely identify the query.
    // All other QueryKey elements are query parameters
    return `${queryKey[0]}___${queryKey[1]}`;
  }

  // We actually should never reach this point :)
  return queryKey.join('___');
}

export function initPersister() {
  
  addResultTypeFactory('Client___commentsAll', (data: any) => { const result = new CommentDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___myChannels', (data: any) => { const result = new ChannelDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___channelsAll', (data: any) => { const result = new ChannelDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___channelsGET', (data: any) => { const result = new ChannelDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___channelVideos', (data: any) => { const result = new WithTotalCountOfVideoDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___channelPlaylists', (data: any) => { const result = new WithTotalCountOfPlaylistDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___channelAdvancedInfo', (data: any) => { const result = new ChannelAdvancedInfoDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___channelUserInfoGET', (data: any) => { const result = new ChannelUserSpecificInfoDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___myPlaylists', (data: any) => { const result = new PlaylistDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___playlistsGET', (data: any) => { const result = new PlaylistDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___tagsAll', (data: any) => { const result = new TagDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___tagsWithVideos', (data: any) => { const result = new Tag(); result.init(data); return result; });
  addResultTypeFactory('Client___me', (data: any) => { const result = new UserDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___usersAll', (data: any) => { const result = new UserDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___usersGET', (data: any) => { const result = new UserDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___userVideoStatsGET', (data: any) => { const result = new UserVideoStats(); result.init(data); return result; });
  addResultTypeFactory('Client___videosAll', (data: any) => { const result = new VideoDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___videosGET', (data: any) => { const result = new VideoDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___myVideos', (data: any) => { const result = new VideoDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___relatedVideos', (data: any) => { const result = new VideoDTO(); result.init(data); return result; });


}
//-----/PersistorHydrator.File----