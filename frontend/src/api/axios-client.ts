//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import type { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export * as Client from './axios-client/Client';

export * as Query from './axios-client/Query';



//-----Types.File-----
export class CommentDTO implements ICommentDTO {
    id!: string;
    /** Id uživatele, který komentář vytvořil. */
    userId!: string;
    /** Id videa, ke kterému komentář patří. */
    videoId!: string;
    text!: string;
    created!: Date;
    /** Podrobnější informace o uživateli, který komentář vytvořil. */
    user!: UserDTO;

    constructor(data?: ICommentDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.user = new UserDTO();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.videoId = _data["videoId"];
            this.text = _data["text"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.user = _data["user"] ? UserDTO.fromJS(_data["user"]) : new UserDTO();
        }
    }

    static fromJS(data: any): CommentDTO {
        data = typeof data === 'object' ? data : {};
        let result = new CommentDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["videoId"] = this.videoId;
        data["text"] = this.text;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICommentDTO {
    id: string;
    /** Id uživatele, který komentář vytvořil. */
    userId: string;
    /** Id videa, ke kterému komentář patří. */
    videoId: string;
    text: string;
    created: Date;
    /** Podrobnější informace o uživateli, který komentář vytvořil. */
    user: UserDTO;
}

export class CommentPostDTO implements ICommentPostDTO {
    /** Id videa, ke kterému komentář patří. */
    videoId!: string;
    text!: string;

    constructor(data?: ICommentPostDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.videoId = _data["videoId"];
            this.text = _data["text"];
        }
    }

    static fromJS(data: any): CommentPostDTO {
        data = typeof data === 'object' ? data : {};
        let result = new CommentPostDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["videoId"] = this.videoId;
        data["text"] = this.text;
        return data;
    }
}

export interface ICommentPostDTO {
    /** Id videa, ke kterému komentář patří. */
    videoId: string;
    text: string;
}

export class CommentPutDTO implements ICommentPutDTO {
    text!: string;

    constructor(data?: ICommentPutDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.text = _data["text"];
        }
    }

    static fromJS(data: any): CommentPutDTO {
        data = typeof data === 'object' ? data : {};
        let result = new CommentPutDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["text"] = this.text;
        return data;
    }
}

export interface ICommentPutDTO {
    text: string;
}

export class IncludeExcludeObjectPermissions implements IIncludeExcludeObjectPermissions {
    /** Kolekce uživatelů a skupin, které mají na objekt právo. */
    includedPermissions?: ObjectPermissions | undefined;
    /** Kolekce uživatelů a skupin, které nemají na objekt právo. */
    excludedPermissions?: ObjectPermissions | undefined;

    constructor(data?: IIncludeExcludeObjectPermissions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.includedPermissions = _data["includedPermissions"] ? ObjectPermissions.fromJS(_data["includedPermissions"]) : <any>undefined;
            this.excludedPermissions = _data["excludedPermissions"] ? ObjectPermissions.fromJS(_data["excludedPermissions"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IncludeExcludeObjectPermissions {
        data = typeof data === 'object' ? data : {};
        let result = new IncludeExcludeObjectPermissions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["includedPermissions"] = this.includedPermissions ? this.includedPermissions.toJSON() : <any>undefined;
        data["excludedPermissions"] = this.excludedPermissions ? this.excludedPermissions.toJSON() : <any>undefined;
        return data;
    }
}

export interface IIncludeExcludeObjectPermissions {
    /** Kolekce uživatelů a skupin, které mají na objekt právo. */
    includedPermissions?: ObjectPermissions | undefined;
    /** Kolekce uživatelů a skupin, které nemají na objekt právo. */
    excludedPermissions?: ObjectPermissions | undefined;
}

export class LikeDislikeStats implements ILikeDislikeStats {
    likeCount!: number;
    dislikeCount!: number;

    constructor(data?: ILikeDislikeStats) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.likeCount = _data["likeCount"];
            this.dislikeCount = _data["dislikeCount"];
        }
    }

    static fromJS(data: any): LikeDislikeStats {
        data = typeof data === 'object' ? data : {};
        let result = new LikeDislikeStats();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["likeCount"] = this.likeCount;
        data["dislikeCount"] = this.dislikeCount;
        return data;
    }
}

export interface ILikeDislikeStats {
    likeCount: number;
    dislikeCount: number;
}

export class LoginDTO implements ILoginDTO {
    email!: string;
    password!: string;

    constructor(data?: ILoginDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginDTO {
        data = typeof data === 'object' ? data : {};
        let result = new LoginDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginDTO {
    email: string;
    password: string;
}

export class ObjectPermissions implements IObjectPermissions {
    userIds?: string[] | undefined;
    groupIds?: string[] | undefined;

    constructor(data?: IObjectPermissions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["userIds"])) {
                this.userIds = [] as any;
                for (let item of _data["userIds"])
                    this.userIds!.push(item);
            }
            if (Array.isArray(_data["groupIds"])) {
                this.groupIds = [] as any;
                for (let item of _data["groupIds"])
                    this.groupIds!.push(item);
            }
        }
    }

    static fromJS(data: any): ObjectPermissions {
        data = typeof data === 'object' ? data : {};
        let result = new ObjectPermissions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.userIds)) {
            data["userIds"] = [];
            for (let item of this.userIds)
                data["userIds"].push(item);
        }
        if (Array.isArray(this.groupIds)) {
            data["groupIds"] = [];
            for (let item of this.groupIds)
                data["groupIds"].push(item);
        }
        return data;
    }
}

export interface IObjectPermissions {
    userIds?: string[] | undefined;
    groupIds?: string[] | undefined;
}

export class PasswordResetDTO implements IPasswordResetDTO {
    email!: string;
    password!: string;
    /** Token z odkazu v přijatém emailovém potvrzení. */
    token!: string;

    constructor(data?: IPasswordResetDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): PasswordResetDTO {
        data = typeof data === 'object' ? data : {};
        let result = new PasswordResetDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        data["token"] = this.token;
        return data;
    }
}

export interface IPasswordResetDTO {
    email: string;
    password: string;
    /** Token z odkazu v přijatém emailovém potvrzení. */
    token: string;
}

export class Permission implements IPermission {
    id!: string;
    userId?: string | undefined;
    user?: User | undefined;
    userGroupId?: string | undefined;
    userGroup?: UserGroup | undefined;
    playlistId?: string | undefined;
    playlist?: Playlist | undefined;
    videoId?: string | undefined;
    video?: Video | undefined;
    /** Příznak který je možné nastavit pouze v případě že se jedná o právo na video, a určuje, zdali má uživatel právo na video případně nemá. */
    overridedEnableWatch?: boolean | undefined;

    constructor(data?: IPermission) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.user = _data["user"] ? User.fromJS(_data["user"]) : <any>undefined;
            this.userGroupId = _data["userGroupId"];
            this.userGroup = _data["userGroup"] ? UserGroup.fromJS(_data["userGroup"]) : <any>undefined;
            this.playlistId = _data["playlistId"];
            this.playlist = _data["playlist"] ? Playlist.fromJS(_data["playlist"]) : <any>undefined;
            this.videoId = _data["videoId"];
            this.video = _data["video"] ? Video.fromJS(_data["video"]) : <any>undefined;
            this.overridedEnableWatch = _data["overridedEnableWatch"];
        }
    }

    static fromJS(data: any): Permission {
        data = typeof data === 'object' ? data : {};
        let result = new Permission();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["userGroupId"] = this.userGroupId;
        data["userGroup"] = this.userGroup ? this.userGroup.toJSON() : <any>undefined;
        data["playlistId"] = this.playlistId;
        data["playlist"] = this.playlist ? this.playlist.toJSON() : <any>undefined;
        data["videoId"] = this.videoId;
        data["video"] = this.video ? this.video.toJSON() : <any>undefined;
        data["overridedEnableWatch"] = this.overridedEnableWatch;
        return data;
    }
}

export interface IPermission {
    id: string;
    userId?: string | undefined;
    user?: User | undefined;
    userGroupId?: string | undefined;
    userGroup?: UserGroup | undefined;
    playlistId?: string | undefined;
    playlist?: Playlist | undefined;
    videoId?: string | undefined;
    video?: Video | undefined;
    /** Příznak který je možné nastavit pouze v případě že se jedná o právo na video, a určuje, zdali má uživatel právo na video případně nemá. */
    overridedEnableWatch?: boolean | undefined;
}

export class Playlist implements IPlaylist {
    id!: string;
    name!: string;
    createdTimestamp!: Date;
    description?: string | undefined;
    thumbnailUrl?: string | undefined;
    videos?: PlaylistVideo[] | undefined;
    owner!: User;
    public!: boolean;
    permissions!: Permission[];

    constructor(data?: IPlaylist) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.owner = new User();
            this.permissions = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.createdTimestamp = _data["createdTimestamp"] ? new Date(_data["createdTimestamp"].toString()) : <any>undefined;
            this.description = _data["description"];
            this.thumbnailUrl = _data["thumbnailUrl"];
            if (Array.isArray(_data["videos"])) {
                this.videos = [] as any;
                for (let item of _data["videos"])
                    this.videos!.push(PlaylistVideo.fromJS(item));
            }
            this.owner = _data["owner"] ? User.fromJS(_data["owner"]) : new User();
            this.public = _data["public"];
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"])
                    this.permissions!.push(Permission.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Playlist {
        data = typeof data === 'object' ? data : {};
        let result = new Playlist();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["createdTimestamp"] = this.createdTimestamp ? this.createdTimestamp.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["thumbnailUrl"] = this.thumbnailUrl;
        if (Array.isArray(this.videos)) {
            data["videos"] = [];
            for (let item of this.videos)
                data["videos"].push(item.toJSON());
        }
        data["owner"] = this.owner ? this.owner.toJSON() : <any>undefined;
        data["public"] = this.public;
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPlaylist {
    id: string;
    name: string;
    createdTimestamp: Date;
    description?: string | undefined;
    thumbnailUrl?: string | undefined;
    videos?: PlaylistVideo[] | undefined;
    owner: User;
    public: boolean;
    permissions: Permission[];
}

export class PlaylistBasicInfoDTO implements IPlaylistBasicInfoDTO {
    id!: string;
    name!: string;
    createdTimestamp!: Date;
    description?: string | undefined;
    /** Odkaz na ručně nastavený náhled playlistu. */
    thumbnailUrl?: string | undefined;
    /** Odkaz na náhled prvního videa v playlistu. */
    firstVideoThumbnailUrl?: string | undefined;
    /** Id prvního videa v playlistu. */
    firstVideoId?: string | undefined;
    /** Uživatelské informace o vlastníkovi playlistu. */
    owner!: UserDTO;
    totalDuration!: string;
    videoCount!: number;

    constructor(data?: IPlaylistBasicInfoDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.owner = new UserDTO();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.createdTimestamp = _data["createdTimestamp"] ? new Date(_data["createdTimestamp"].toString()) : <any>undefined;
            this.description = _data["description"];
            this.thumbnailUrl = _data["thumbnailUrl"];
            this.firstVideoThumbnailUrl = _data["firstVideoThumbnailUrl"];
            this.firstVideoId = _data["firstVideoId"];
            this.owner = _data["owner"] ? UserDTO.fromJS(_data["owner"]) : new UserDTO();
            this.totalDuration = _data["totalDuration"];
            this.videoCount = _data["videoCount"];
        }
    }

    static fromJS(data: any): PlaylistBasicInfoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new PlaylistBasicInfoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["createdTimestamp"] = this.createdTimestamp ? this.createdTimestamp.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["thumbnailUrl"] = this.thumbnailUrl;
        data["firstVideoThumbnailUrl"] = this.firstVideoThumbnailUrl;
        data["firstVideoId"] = this.firstVideoId;
        data["owner"] = this.owner ? this.owner.toJSON() : <any>undefined;
        data["totalDuration"] = this.totalDuration;
        data["videoCount"] = this.videoCount;
        return data;
    }
}

export interface IPlaylistBasicInfoDTO {
    id: string;
    name: string;
    createdTimestamp: Date;
    description?: string | undefined;
    /** Odkaz na ručně nastavený náhled playlistu. */
    thumbnailUrl?: string | undefined;
    /** Odkaz na náhled prvního videa v playlistu. */
    firstVideoThumbnailUrl?: string | undefined;
    /** Id prvního videa v playlistu. */
    firstVideoId?: string | undefined;
    /** Uživatelské informace o vlastníkovi playlistu. */
    owner: UserDTO;
    totalDuration: string;
    videoCount: number;
}

export class PlaylistDTO implements IPlaylistDTO {
    id!: string;
    name!: string;
    createdTimestamp!: Date;
    description?: string | undefined;
    /** Odkaz na ručně nastavený náhled playlistu. */
    thumbnailUrl?: string | undefined;
    /** Kolekce videí v playlistu, seřazené dle uloženého pořadí. */
    videos?: VideoDTO[] | undefined;
    /** Uživatelské informace o vlastníkovi playlistu. */
    owner!: UserDTO;
    totalDuration!: string;
    /** Příznak, zdali je playlist veřejný. */
    isPublic!: boolean;
    /** Příznak, zdali je playlist pro přihlášeného uživatele pouze ke čtení. */
    isReadOnly!: boolean;

    constructor(data?: IPlaylistDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.owner = new UserDTO();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.createdTimestamp = _data["createdTimestamp"] ? new Date(_data["createdTimestamp"].toString()) : <any>undefined;
            this.description = _data["description"];
            this.thumbnailUrl = _data["thumbnailUrl"];
            if (Array.isArray(_data["videos"])) {
                this.videos = [] as any;
                for (let item of _data["videos"])
                    this.videos!.push(VideoDTO.fromJS(item));
            }
            this.owner = _data["owner"] ? UserDTO.fromJS(_data["owner"]) : new UserDTO();
            this.totalDuration = _data["totalDuration"];
            this.isPublic = _data["isPublic"];
            this.isReadOnly = _data["isReadOnly"];
        }
    }

    static fromJS(data: any): PlaylistDTO {
        data = typeof data === 'object' ? data : {};
        let result = new PlaylistDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["createdTimestamp"] = this.createdTimestamp ? this.createdTimestamp.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["thumbnailUrl"] = this.thumbnailUrl;
        if (Array.isArray(this.videos)) {
            data["videos"] = [];
            for (let item of this.videos)
                data["videos"].push(item.toJSON());
        }
        data["owner"] = this.owner ? this.owner.toJSON() : <any>undefined;
        data["totalDuration"] = this.totalDuration;
        data["isPublic"] = this.isPublic;
        data["isReadOnly"] = this.isReadOnly;
        return data;
    }
}

export interface IPlaylistDTO {
    id: string;
    name: string;
    createdTimestamp: Date;
    description?: string | undefined;
    /** Odkaz na ručně nastavený náhled playlistu. */
    thumbnailUrl?: string | undefined;
    /** Kolekce videí v playlistu, seřazené dle uloženého pořadí. */
    videos?: VideoDTO[] | undefined;
    /** Uživatelské informace o vlastníkovi playlistu. */
    owner: UserDTO;
    totalDuration: string;
    /** Příznak, zdali je playlist veřejný. */
    isPublic: boolean;
    /** Příznak, zdali je playlist pro přihlášeného uživatele pouze ke čtení. */
    isReadOnly: boolean;
}

export class PlaylistVideo implements IPlaylistVideo {
    playlistId!: string;
    playlist!: Playlist;
    videoId!: string;
    video!: Video;
    order!: number;

    constructor(data?: IPlaylistVideo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.playlist = new Playlist();
            this.video = new Video();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.playlistId = _data["playlistId"];
            this.playlist = _data["playlist"] ? Playlist.fromJS(_data["playlist"]) : new Playlist();
            this.videoId = _data["videoId"];
            this.video = _data["video"] ? Video.fromJS(_data["video"]) : new Video();
            this.order = _data["order"];
        }
    }

    static fromJS(data: any): PlaylistVideo {
        data = typeof data === 'object' ? data : {};
        let result = new PlaylistVideo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["playlistId"] = this.playlistId;
        data["playlist"] = this.playlist ? this.playlist.toJSON() : <any>undefined;
        data["videoId"] = this.videoId;
        data["video"] = this.video ? this.video.toJSON() : <any>undefined;
        data["order"] = this.order;
        return data;
    }
}

export interface IPlaylistVideo {
    playlistId: string;
    playlist: Playlist;
    videoId: string;
    video: Video;
    order: number;
}

export class PostTagDTO implements IPostTagDTO {
    name!: string;
    /** Hex barva tagu. */
    color!: string;

    constructor(data?: IPostTagDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.color = _data["color"];
        }
    }

    static fromJS(data: any): PostTagDTO {
        data = typeof data === 'object' ? data : {};
        let result = new PostTagDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["color"] = this.color;
        return data;
    }
}

export interface IPostTagDTO {
    name: string;
    /** Hex barva tagu. */
    color: string;
}

export class PostVideoResponse implements IPostVideoResponse {
    dataUrl!: string;

    constructor(data?: IPostVideoResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dataUrl = _data["dataUrl"];
        }
    }

    static fromJS(data: any): PostVideoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PostVideoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataUrl"] = this.dataUrl;
        return data;
    }
}

export interface IPostVideoResponse {
    dataUrl: string;
}

export class RegisterDTO implements IRegisterDTO {
    name!: string;
    email!: string;
    password!: string;

    constructor(data?: IRegisterDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): RegisterDTO {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface IRegisterDTO {
    name: string;
    email: string;
    password: string;
}

export class Tag implements ITag {
    id!: string;
    name!: string;
    videos!: Video[];
    color!: string;

    constructor(data?: ITag) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.videos = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["videos"])) {
                this.videos = [] as any;
                for (let item of _data["videos"])
                    this.videos!.push(Video.fromJS(item));
            }
            this.color = _data["color"];
        }
    }

    static fromJS(data: any): Tag {
        data = typeof data === 'object' ? data : {};
        let result = new Tag();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.videos)) {
            data["videos"] = [];
            for (let item of this.videos)
                data["videos"].push(item.toJSON());
        }
        data["color"] = this.color;
        return data;
    }
}

export interface ITag {
    id: string;
    name: string;
    videos: Video[];
    color: string;
}

export class TagDTO implements ITagDTO {
    id!: string;
    name!: string;
    /** Hex barva tagu. */
    color!: string;

    constructor(data?: ITagDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.color = _data["color"];
        }
    }

    static fromJS(data: any): TagDTO {
        data = typeof data === 'object' ? data : {};
        let result = new TagDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["color"] = this.color;
        return data;
    }
}

export interface ITagDTO {
    id: string;
    name: string;
    /** Hex barva tagu. */
    color: string;
}

export class User implements IUser {
    id!: string;
    userName?: string | undefined;
    normalizedUserName?: string | undefined;
    email?: string | undefined;
    normalizedEmail?: string | undefined;
    emailConfirmed!: boolean;
    passwordHash?: string | undefined;
    securityStamp?: string | undefined;
    concurrencyStamp?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed!: boolean;
    twoFactorEnabled!: boolean;
    lockoutEnd?: Date | undefined;
    lockoutEnabled!: boolean;
    accessFailedCount!: number;
    name!: string;
    initials!: string;
    roles!: UserRoles;
    userGroups!: UserGroup[];
    watchLaterPlaylistId?: string | undefined;
    watchLaterPlaylist?: Playlist | undefined;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.roles = new UserRoles();
            this.userGroups = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.normalizedUserName = _data["normalizedUserName"];
            this.email = _data["email"];
            this.normalizedEmail = _data["normalizedEmail"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.passwordHash = _data["passwordHash"];
            this.securityStamp = _data["securityStamp"];
            this.concurrencyStamp = _data["concurrencyStamp"];
            this.phoneNumber = _data["phoneNumber"];
            this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
            this.twoFactorEnabled = _data["twoFactorEnabled"];
            this.lockoutEnd = _data["lockoutEnd"] ? new Date(_data["lockoutEnd"].toString()) : <any>undefined;
            this.lockoutEnabled = _data["lockoutEnabled"];
            this.accessFailedCount = _data["accessFailedCount"];
            this.name = _data["name"];
            this.initials = _data["initials"];
            this.roles = _data["roles"] ? UserRoles.fromJS(_data["roles"]) : new UserRoles();
            if (Array.isArray(_data["userGroups"])) {
                this.userGroups = [] as any;
                for (let item of _data["userGroups"])
                    this.userGroups!.push(UserGroup.fromJS(item));
            }
            this.watchLaterPlaylistId = _data["watchLaterPlaylistId"];
            this.watchLaterPlaylist = _data["watchLaterPlaylist"] ? Playlist.fromJS(_data["watchLaterPlaylist"]) : <any>undefined;
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["normalizedUserName"] = this.normalizedUserName;
        data["email"] = this.email;
        data["normalizedEmail"] = this.normalizedEmail;
        data["emailConfirmed"] = this.emailConfirmed;
        data["passwordHash"] = this.passwordHash;
        data["securityStamp"] = this.securityStamp;
        data["concurrencyStamp"] = this.concurrencyStamp;
        data["phoneNumber"] = this.phoneNumber;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["twoFactorEnabled"] = this.twoFactorEnabled;
        data["lockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toISOString() : <any>undefined;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["accessFailedCount"] = this.accessFailedCount;
        data["name"] = this.name;
        data["initials"] = this.initials;
        data["roles"] = this.roles ? this.roles.toJSON() : <any>undefined;
        if (Array.isArray(this.userGroups)) {
            data["userGroups"] = [];
            for (let item of this.userGroups)
                data["userGroups"].push(item.toJSON());
        }
        data["watchLaterPlaylistId"] = this.watchLaterPlaylistId;
        data["watchLaterPlaylist"] = this.watchLaterPlaylist ? this.watchLaterPlaylist.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUser {
    id: string;
    userName?: string | undefined;
    normalizedUserName?: string | undefined;
    email?: string | undefined;
    normalizedEmail?: string | undefined;
    emailConfirmed: boolean;
    passwordHash?: string | undefined;
    securityStamp?: string | undefined;
    concurrencyStamp?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed: boolean;
    twoFactorEnabled: boolean;
    lockoutEnd?: Date | undefined;
    lockoutEnabled: boolean;
    accessFailedCount: number;
    name: string;
    initials: string;
    roles: UserRoles;
    userGroups: UserGroup[];
    watchLaterPlaylistId?: string | undefined;
    watchLaterPlaylist?: Playlist | undefined;
}

export class UserDTO implements IUserDTO {
    id!: string;
    name!: string;
    email!: string;
    /** Iniciály uživatele. */
    initials!: string;
    /** Objekt s příznaky u rolí, které uživatel má. */
    roles!: UserRoles;

    constructor(data?: IUserDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.roles = new UserRoles();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.initials = _data["initials"];
            this.roles = _data["roles"] ? UserRoles.fromJS(_data["roles"]) : new UserRoles();
        }
    }

    static fromJS(data: any): UserDTO {
        data = typeof data === 'object' ? data : {};
        let result = new UserDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["email"] = this.email;
        data["initials"] = this.initials;
        data["roles"] = this.roles ? this.roles.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUserDTO {
    id: string;
    name: string;
    email: string;
    /** Iniciály uživatele. */
    initials: string;
    /** Objekt s příznaky u rolí, které uživatel má. */
    roles: UserRoles;
}

export class UserGroup implements IUserGroup {
    id!: string;
    name!: string;
    users!: User[];
    ownerGroupId?: string | undefined;

    constructor(data?: IUserGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.users = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(User.fromJS(item));
            }
            this.ownerGroupId = _data["ownerGroupId"];
        }
    }

    static fromJS(data: any): UserGroup {
        data = typeof data === 'object' ? data : {};
        let result = new UserGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        data["ownerGroupId"] = this.ownerGroupId;
        return data;
    }
}

export interface IUserGroup {
    id: string;
    name: string;
    users: User[];
    ownerGroupId?: string | undefined;
}

export class UserGroupDTO implements IUserGroupDTO {
    id!: string;
    name!: string;
    /** Kolekce informací o uživatelích patřící do skupiny. */
    users!: UserDTO[];
    /** Id vlastnické skupiny, tedy skupiny, která skupinu vytvořila a může ji také upravovat. */
    ownerGroupId?: string | undefined;

    constructor(data?: IUserGroupDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.users = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(UserDTO.fromJS(item));
            }
            this.ownerGroupId = _data["ownerGroupId"];
        }
    }

    static fromJS(data: any): UserGroupDTO {
        data = typeof data === 'object' ? data : {};
        let result = new UserGroupDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        data["ownerGroupId"] = this.ownerGroupId;
        return data;
    }
}

export interface IUserGroupDTO {
    id: string;
    name: string;
    /** Kolekce informací o uživatelích patřící do skupiny. */
    users: UserDTO[];
    /** Id vlastnické skupiny, tedy skupiny, která skupinu vytvořila a může ji také upravovat. */
    ownerGroupId?: string | undefined;
}

export class UserGroupPostPutDTO implements IUserGroupPostPutDTO {
    name!: string;
    /** Kolekce ID uživatelů patřících do skupiny. */
    userIds!: string[];
    /** Id vlastnické skupiny, tedy skupiny, která skupinu vytvořila a může ji také upravovat. */
    ownerGroupId?: string | undefined;

    constructor(data?: IUserGroupPostPutDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.userIds = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["userIds"])) {
                this.userIds = [] as any;
                for (let item of _data["userIds"])
                    this.userIds!.push(item);
            }
            this.ownerGroupId = _data["ownerGroupId"];
        }
    }

    static fromJS(data: any): UserGroupPostPutDTO {
        data = typeof data === 'object' ? data : {};
        let result = new UserGroupPostPutDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.userIds)) {
            data["userIds"] = [];
            for (let item of this.userIds)
                data["userIds"].push(item);
        }
        data["ownerGroupId"] = this.ownerGroupId;
        return data;
    }
}

export interface IUserGroupPostPutDTO {
    name: string;
    /** Kolekce ID uživatelů patřících do skupiny. */
    userIds: string[];
    /** Id vlastnické skupiny, tedy skupiny, která skupinu vytvořila a může ji také upravovat. */
    ownerGroupId?: string | undefined;
}

export class UserRoles implements IUserRoles {
    /** Role uživatel, má ji každý přihlášený uživatel. */
    user!: boolean;
    /** Role video editor, která dovoluje uživateli nahrávat videa a vytvářet playlisty. */
    videoEditor!: boolean;
    /** Role pro aplikačního administrátora. */
    administrator!: boolean;

    constructor(data?: IUserRoles) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.user = _data["user"];
            this.videoEditor = _data["videoEditor"];
            this.administrator = _data["administrator"];
        }
    }

    static fromJS(data: any): UserRoles {
        data = typeof data === 'object' ? data : {};
        let result = new UserRoles();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user;
        data["videoEditor"] = this.videoEditor;
        data["administrator"] = this.administrator;
        return data;
    }
}

export interface IUserRoles {
    /** Role uživatel, má ji každý přihlášený uživatel. */
    user: boolean;
    /** Role video editor, která dovoluje uživateli nahrávat videa a vytvářet playlisty. */
    videoEditor: boolean;
    /** Role pro aplikačního administrátora. */
    administrator: boolean;
}

export class UserVideoStats implements IUserVideoStats {
    like!: boolean;
    dislike!: boolean;
    addedToPlaylist!: boolean;
    timeWatchedSec!: number;
    userId!: string;
    videoId!: string;
    video!: Video;

    constructor(data?: IUserVideoStats) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.video = new Video();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.like = _data["like"];
            this.dislike = _data["dislike"];
            this.addedToPlaylist = _data["addedToPlaylist"];
            this.timeWatchedSec = _data["timeWatchedSec"];
            this.userId = _data["userId"];
            this.videoId = _data["videoId"];
            this.video = _data["video"] ? Video.fromJS(_data["video"]) : new Video();
        }
    }

    static fromJS(data: any): UserVideoStats {
        data = typeof data === 'object' ? data : {};
        let result = new UserVideoStats();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["like"] = this.like;
        data["dislike"] = this.dislike;
        data["addedToPlaylist"] = this.addedToPlaylist;
        data["timeWatchedSec"] = this.timeWatchedSec;
        data["userId"] = this.userId;
        data["videoId"] = this.videoId;
        data["video"] = this.video ? this.video.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUserVideoStats {
    like: boolean;
    dislike: boolean;
    addedToPlaylist: boolean;
    timeWatchedSec: number;
    userId: string;
    videoId: string;
    video: Video;
}

export class UserVideoStatsDTO implements IUserVideoStatsDTO {
    /** Příznak, zda přihlášený uživatel má u videa like. */
    like!: boolean;
    /** Příznak, zda přihlášený uživatel má u videa dislike. */
    dislike!: boolean;
    /** Příznak, zda si přihlášený uživatel video přidal do playlistu přehrát později. */
    addedToPlaylist!: boolean;
    /** Celkový čas, který uživatel z videa již viděl. Slouží pro pokračování přehrávání tam, kde uživatel skončil. */
    timeWatchedSec!: number;
    userId!: string;
    videoId!: string;

    constructor(data?: IUserVideoStatsDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.like = _data["like"];
            this.dislike = _data["dislike"];
            this.addedToPlaylist = _data["addedToPlaylist"];
            this.timeWatchedSec = _data["timeWatchedSec"];
            this.userId = _data["userId"];
            this.videoId = _data["videoId"];
        }
    }

    static fromJS(data: any): UserVideoStatsDTO {
        data = typeof data === 'object' ? data : {};
        let result = new UserVideoStatsDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["like"] = this.like;
        data["dislike"] = this.dislike;
        data["addedToPlaylist"] = this.addedToPlaylist;
        data["timeWatchedSec"] = this.timeWatchedSec;
        data["userId"] = this.userId;
        data["videoId"] = this.videoId;
        return data;
    }
}

export interface IUserVideoStatsDTO {
    /** Příznak, zda přihlášený uživatel má u videa like. */
    like: boolean;
    /** Příznak, zda přihlášený uživatel má u videa dislike. */
    dislike: boolean;
    /** Příznak, zda si přihlášený uživatel video přidal do playlistu přehrát později. */
    addedToPlaylist: boolean;
    /** Celkový čas, který uživatel z videa již viděl. Slouží pro pokračování přehrávání tam, kde uživatel skončil. */
    timeWatchedSec: number;
    userId: string;
    videoId: string;
}

export class Video implements IVideo {
    id!: string;
    name!: string;
    imageUrl!: string;
    duration!: string;
    description?: string | undefined;
    dataUrl!: string;
    likeCount!: number;
    dislikeCount!: number;
    views!: number;
    uploadTimestamp!: Date;
    tags?: Tag[] | undefined;
    mainPlaylist!: Playlist;
    owner!: User;
    permissions!: Permission[];
    userVideoStats!: UserVideoStats[];

    constructor(data?: IVideo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.mainPlaylist = new Playlist();
            this.owner = new User();
            this.permissions = [];
            this.userVideoStats = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.imageUrl = _data["imageUrl"];
            this.duration = _data["duration"];
            this.description = _data["description"];
            this.dataUrl = _data["dataUrl"];
            this.likeCount = _data["likeCount"];
            this.dislikeCount = _data["dislikeCount"];
            this.views = _data["views"];
            this.uploadTimestamp = _data["uploadTimestamp"] ? new Date(_data["uploadTimestamp"].toString()) : <any>undefined;
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(Tag.fromJS(item));
            }
            this.mainPlaylist = _data["mainPlaylist"] ? Playlist.fromJS(_data["mainPlaylist"]) : new Playlist();
            this.owner = _data["owner"] ? User.fromJS(_data["owner"]) : new User();
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"])
                    this.permissions!.push(Permission.fromJS(item));
            }
            if (Array.isArray(_data["userVideoStats"])) {
                this.userVideoStats = [] as any;
                for (let item of _data["userVideoStats"])
                    this.userVideoStats!.push(UserVideoStats.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Video {
        data = typeof data === 'object' ? data : {};
        let result = new Video();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["imageUrl"] = this.imageUrl;
        data["duration"] = this.duration;
        data["description"] = this.description;
        data["dataUrl"] = this.dataUrl;
        data["likeCount"] = this.likeCount;
        data["dislikeCount"] = this.dislikeCount;
        data["views"] = this.views;
        data["uploadTimestamp"] = this.uploadTimestamp ? this.uploadTimestamp.toISOString() : <any>undefined;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item.toJSON());
        }
        data["mainPlaylist"] = this.mainPlaylist ? this.mainPlaylist.toJSON() : <any>undefined;
        data["owner"] = this.owner ? this.owner.toJSON() : <any>undefined;
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJSON());
        }
        if (Array.isArray(this.userVideoStats)) {
            data["userVideoStats"] = [];
            for (let item of this.userVideoStats)
                data["userVideoStats"].push(item.toJSON());
        }
        return data;
    }
}

export interface IVideo {
    id: string;
    name: string;
    imageUrl: string;
    duration: string;
    description?: string | undefined;
    dataUrl: string;
    likeCount: number;
    dislikeCount: number;
    views: number;
    uploadTimestamp: Date;
    tags?: Tag[] | undefined;
    mainPlaylist: Playlist;
    owner: User;
    permissions: Permission[];
    userVideoStats: UserVideoStats[];
}

export class VideoDTO implements IVideoDTO {
    id!: string;
    name!: string;
    /** Odkaz na náhledový obrázek videa. */
    imageUrl!: string;
    duration!: string;
    description?: string | undefined;
    /** Odkaz na surová data videa. */
    dataUrl!: string;
    likeCount!: number;
    dislikeCount!: number;
    views!: number;
    uploadTimestamp!: Date;
    /** Kolekce tagů, které video má. */
    tags?: TagDTO[] | undefined;
    /** Id playlistu, do kterého video patří. */
    mainPlaylistId!: string;
    /** Název playlistu, do kterého video patří. */
    mainPlaylistName!: string;
    /** Uživatelská data o vlastníkovi videa. */
    owner!: UserDTO;
    /** Příznak, zdali se jedná o video na které nemá uživatel právo. */
    isEmpty?: boolean | undefined;

    constructor(data?: IVideoDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.owner = new UserDTO();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.imageUrl = _data["imageUrl"];
            this.duration = _data["duration"];
            this.description = _data["description"];
            this.dataUrl = _data["dataUrl"];
            this.likeCount = _data["likeCount"];
            this.dislikeCount = _data["dislikeCount"];
            this.views = _data["views"];
            this.uploadTimestamp = _data["uploadTimestamp"] ? new Date(_data["uploadTimestamp"].toString()) : <any>undefined;
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(TagDTO.fromJS(item));
            }
            this.mainPlaylistId = _data["mainPlaylistId"];
            this.mainPlaylistName = _data["mainPlaylistName"];
            this.owner = _data["owner"] ? UserDTO.fromJS(_data["owner"]) : new UserDTO();
            this.isEmpty = _data["isEmpty"];
        }
    }

    static fromJS(data: any): VideoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new VideoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["imageUrl"] = this.imageUrl;
        data["duration"] = this.duration;
        data["description"] = this.description;
        data["dataUrl"] = this.dataUrl;
        data["likeCount"] = this.likeCount;
        data["dislikeCount"] = this.dislikeCount;
        data["views"] = this.views;
        data["uploadTimestamp"] = this.uploadTimestamp ? this.uploadTimestamp.toISOString() : <any>undefined;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item.toJSON());
        }
        data["mainPlaylistId"] = this.mainPlaylistId;
        data["mainPlaylistName"] = this.mainPlaylistName;
        data["owner"] = this.owner ? this.owner.toJSON() : <any>undefined;
        data["isEmpty"] = this.isEmpty;
        return data;
    }
}

export interface IVideoDTO {
    id: string;
    name: string;
    /** Odkaz na náhledový obrázek videa. */
    imageUrl: string;
    duration: string;
    description?: string | undefined;
    /** Odkaz na surová data videa. */
    dataUrl: string;
    likeCount: number;
    dislikeCount: number;
    views: number;
    uploadTimestamp: Date;
    /** Kolekce tagů, které video má. */
    tags?: TagDTO[] | undefined;
    /** Id playlistu, do kterého video patří. */
    mainPlaylistId: string;
    /** Název playlistu, do kterého video patří. */
    mainPlaylistName: string;
    /** Uživatelská data o vlastníkovi videa. */
    owner: UserDTO;
    /** Příznak, zdali se jedná o video na které nemá uživatel právo. */
    isEmpty?: boolean | undefined;
}

/** Struktura obalující seznam položek a jejich celkový počet. Používá se pro stránkování. */
export class WithTotalCountOfVideoDTO implements IWithTotalCountOfVideoDTO {
    items!: VideoDTO[];
    totalCount!: number;

    constructor(data?: IWithTotalCountOfVideoDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.items = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(VideoDTO.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): WithTotalCountOfVideoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new WithTotalCountOfVideoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }
}

/** Struktura obalující seznam položek a jejich celkový počet. Používá se pro stránkování. */
export interface IWithTotalCountOfVideoDTO {
    items: VideoDTO[];
    totalCount: number;
}
//-----/CustomTypes.File-----

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

export function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

export function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}

//-----/Types.File-----

import { addResultTypeFactory } from './axios-client/helpers';
export { setBaseUrl, getBaseUrl } from './axios-client/helpers';
export { setAxiosFactory, getAxios } from './axios-client/helpers';


//-----PersistorHydrator.File-----
import type { PersistedClient } from '@tanstack/react-query-persist-client';
import type { DehydratedState, QueryKey } from '@tanstack/react-query'
import { getResultTypeFactory } from './axios-client/helpers';

/*
 * If you have Dates in QueryKeys (i.e. in request parameters), you need to deserialize them to Dates correctly
 * (otherwise they are deserialized as strings by default, and your queries are broken).
 */
export function deserializeDate(str: unknown) {
  if (!str || typeof str !== 'string') return str;
  if (!/^\d\d\d\d\-\d\d\-\d\d/.test(str)) return str;
  
  const date = new Date(str);
  const isDate = date instanceof Date && !isNaN(date as any);
  
  return isDate ? date : str;
}

export function deserializeDatesInQueryKeys(queryKey: QueryKey) {
  return queryKey
    // We need to replace `null` with `undefined` in query key, because
    // `undefined` is serialized as `null`.
    // And most probably if we have `null` in QueryKey it actually means `undefined`.
    // We can't keep nulls, because they have a different meaning, and e.g. boolean parameters are not allowed to be null.
    .map(x => (x === null ? undefined : x))
    .map(x => deserializeDate(x));
}

export function deserializeClassesInQueryData(queryKey: QueryKey, data: any) {
  if (!data) {
    return data;
  } else if (typeof data !== 'object') {
    return data;
  } else if ('pages' in data && 'pageParams' in data && Array.isArray(data.pages) && Array.isArray(data.pageParams)) {
    // infinite query
    data.pages = data.pages.map((page:any) => deserializeClassesInQueryData(queryKey, page));
  } else if (Array.isArray(data)) {
    return data.map(elem => constructDtoClass(queryKey, elem));
  } else {
    return constructDtoClass(queryKey, data);
  }
}

/*
 * Pass this function as `deserialize` option to createSyncStoragePersister/createAsyncStoragePersister
 * to correctly deserialize your DTOs (including Dates)
 */
export function persisterDeserialize(cache: string): PersistedClient {
  const client: PersistedClient = JSON.parse(cache);
  client.clientState.queries.forEach((query) => {
    query.state.data = deserializeClassesInQueryData(query.queryKey, query.state.data);
    query.queryKey = deserializeDatesInQueryKeys(query.queryKey);
  });

  return client;
}

export function constructDtoClass(queryKey: QueryKey, data: any): unknown {
  const resultTypeKey = getResultTypeClassKey(queryKey);
  const constructorFunction = getResultTypeFactory(resultTypeKey);

  if (!data || !constructorFunction)
    return data;

  return constructorFunction(data);
}

export function getResultTypeClassKey(queryKey: QueryKey): string {
  if (!Array.isArray(queryKey)) {
    return queryKey as unknown as string;
  }
  if (queryKey.length >= 2) {
    // We concatenate first and second elements, because they uniquely identify the query.
    // All other QueryKey elements are query parameters
    return `${queryKey[0]}___${queryKey[1]}`;
  }

  // We actually should never reach this point :)
  return queryKey.join('___');
}

export function initPersister() {
  
  addResultTypeFactory('Client___commentsAll', (data: any) => { const result = new CommentDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___playlistsAll', (data: any) => { const result = new PlaylistBasicInfoDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___playlistsGET', (data: any) => { const result = new PlaylistDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___playlistPermissions', (data: any) => { const result = new ObjectPermissions(); result.init(data); return result; });
  addResultTypeFactory('Client___myPlaylists', (data: any) => { const result = new PlaylistDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___tagsAll', (data: any) => { const result = new TagDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___tagsWithVideos', (data: any) => { const result = new Tag(); result.init(data); return result; });
  addResultTypeFactory('Client___myUsergroups', (data: any) => { const result = new UserGroupDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___userGroupsGET', (data: any) => { const result = new UserGroupDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___me', (data: any) => { const result = new UserDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___usersAll', (data: any) => { const result = new UserDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___usersGET', (data: any) => { const result = new UserDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___userVideoStatsGET', (data: any) => { const result = new UserVideoStatsDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___stats', (data: any) => { const result = new LikeDislikeStats(); result.init(data); return result; });
  addResultTypeFactory('Client___videosAll', (data: any) => { const result = new VideoDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___videosGET', (data: any) => { const result = new VideoDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___videoPermissions', (data: any) => { const result = new IncludeExcludeObjectPermissions(); result.init(data); return result; });
  addResultTypeFactory('Client___myVideos', (data: any) => { const result = new VideoDTO(); result.init(data); return result; });
  addResultTypeFactory('Client___relatedVideos', (data: any) => { const result = new VideoDTO(); result.init(data); return result; });


}
//-----/PersistorHydrator.File----